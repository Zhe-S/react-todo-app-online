{"version":3,"sources":["components/TodoItem/TodoItem.module.css","components/Header/Header.js","components/TodoCount/TodoCount.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/InputTodo/InputTodo.js","components/Practice/AlertButton.js","pages/About.js","pages/NotMatch.js","components/Navbar/Navbar.js","pages/Contact.js","components/TodoContainer/TodoContainer.js","index.js"],"names":["module","exports","Header","style","padding","lineHeight","fontSize","fontWeight","marginBottom","color","textTransform","textAlign","TodoCount","props","completedTodos","todosProp","filter","todoObject","completed","length","TodoItem","className","styles","item","checkbox","type","checked","onChange","handleChangeProp","id","display","onDoubleClick","console","log","fontStyle","opacity","textDecoration","children","onClick","delTodoProp","TodoList","this","map","todo","title","React","Component","InputTodo","useState","setTitle","onSubmit","e","preventDefault","trim","addTodoProp","alert","name","placeholder","value","target","size","About","NotMatch","Navbar","activeClass","activeClassName","to","exact","Contact","TodoContainer","handleChange","setState","todos","state","todoObj","addTodo","newTodo","uuidv4","delTodo","newTodos","fetch","then","resp","json","jsonData","formattedData","_id","temp","localStorage","getItem","loadedTodos","JSON","parse","previousProps","previousState","stringify","setItem","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ba8d18f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"TodoItem_item__2olry\",\"checkbox\":\"TodoItem_checkbox__3UTxr\"};","const Header = ()=>{\n    const h1Style = {\n        fontSize:\"6rem\",\n        fontWeight:\"600\",\n        marginBottom:\"2rem\",\n        lineHeight: \"1em\",\n        color: \"#ececec\",\n        textTransform: \"lowercase\",\n        textAlign: \"center\",\n        }\n\n    return(\n        <header style={{\n            padding:\"20px 0\",\n            lineHeight:\"1.5em\",\n            \n        }}>\n            <h1 style={h1Style}>\n                todos\n            </h1>\n        </header>\n    )   \n}\n\nexport default Header","const TodoCount = (props) => {\n\n    // filter erstellt uns hier ein neues Array mit Objecten (also Todos)\n    // die \"completed:true\" haben\n    const completedTodos = props.todosProp.filter( todoObject => {\n      return todoObject.completed === true;\n    });\n  \n    return (\n      <p>\n        {completedTodos.length}/{props.todosProp.length} Todos erledigt\n      </p>\n    );\n  };\n  \n  export default TodoCount;\n  ","import styles from \"./TodoItem.module.css\"\nimport { FaTrash } from \"react-icons/fa\"\n\nconst TodoItem = (props) => {\n\n  const completedStyle = {\n    fontStyle: \"italic\",\n    color: \"#595959\",\n    opacity: 0.4,\n    textDecoration: \"line-through\",\n  }\n\n\n\n\n\n\n\n\n  \n  const handleEdit = ()=>{\n    console.log('edit mode acticated')\n  }\n\n  return (\n    <li className = {styles.item}>\n      <input \n        className= {styles.checkbox}\n        type=\"checkbox\" \n        checked ={props.completed}\n        onChange={ ()=>{props.handleChangeProp(props.id)} }\n      />\n      <div style={{display:\"inlin-block\"}} onDoubleClick={handleEdit}>\n       <span style={props.completed ? completedStyle:null}>\n         {props.children}\n       </span>\n      </div>\n      \n      <button\n        onClick={()=>{props.delTodoProp(props.id)}}\n      >\n       <FaTrash color= \"darkorange\" fontSize= \"20px\"/>\n      </button>\n    </li>\n  )\n};\n\nexport default TodoItem;\n\n// props.children:\n// gibt aus, was zwischen dem\n// öffnenden <TodoItem> und \n// schließenden </TodoItem> Tags steht","//Aufgabe: Erstelle Component, die <p>Ich bin die TodoListe</p> ausgibt\n// fügt sie TodoContainer hinzu und rendert sie dort\nimport React from \"react\";\nimport TodoItem from \"../TodoItem/TodoItem.js\";\n\n// Prop in functional component\n// const TodoList = (props) => {\n\n//   console.log(props)\n// }; \n\nclass TodoList extends React.Component {\n\n  render() {\n    console.log(this.props);\n\n    // this.props.todos: Zugriff auf die\n    // prop \"todos\" => Zugriff auf todo-state bzw.-todo Array\n\n    //unique key/einmaliger key: Hilft sozusagen react\n    // effizienter zu arbeiten\n    return (\n      <ul>\n        {this.props.todosProp.map(todo => {\n          //console.log('todo.title in this.props.todosProp.map:', todo.title);\n          return (\n            <TodoItem \n              key={todo.id} \n              id={todo.id}\n              completed={todo.completed}\n              handleChangeProp={this.props.handleChangeProp}\n              delTodoProp={this.props.delTodoProp}\n            >\n              {todo.title}\n            </TodoItem>\n          );\n        })}\n      </ul>\n    )\n  }\n}\n\nexport default TodoList;\n\n\n// ERKLÄRUNGEN\n//todo parameter in map (this.props.todosProp.map(todo...)\n// beinhaltet immer das aktuelle todo-Object. Z.B:\n// {\n//   id: 1,\n//   title: \"React lernen\",\n//   completed: true\n// }\n\n\n// Object in constante\n// let todo = {\n//   id: 1,\n//   title: \"React lernen\",\n//   completed: true\n// }\n// alert( todo.completed );","import React, { Component, useState } from \"react\";\nimport \"./InputTodo.css\";\nimport { FaPlusCircle } from 'react-icons/fa'\n\n// als functional component\nfunction InputTodo(props) {\n\n  // 1. Variable title => beinhaltet state \n  // 2. Variable setTitle => beinhaltet function zum Ändern des States\n  const [title, setTitle] = useState(\"\"); // setzt initial state title auf \"\"\n  // quasi gleichbedeutend mit\n  // const title = useState(\"\")[0];\n  // const setState = useState(\"\")[1];\n\n  const onChangeHandler = (e) => {\n    setTitle(e.target.value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault(); // vermeide Abschicken des Formulars\n\n    console.log(title);\n\n    if (title.trim() !== \"\") { //Title ist nicht leer\n      props.addTodoProp(title.trim());\n\n      // Input Feld leeren\n      setTitle(\"\");\n\n    } else {\n      alert('Bitte Item reinschreiben!')\n    }\n\n  }\n\n\n  return (\n    <>\n      \n      <form\n        onSubmit={handleSubmit}\n        className=\"form-container\"\n      >\n\n        <input\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"Add Todo...\"\n          value={title}\n          onChange={onChangeHandler}\n          className=\"input-text\"\n        />\n        <button className=\"input-submit\">\n        <FaPlusCircle color= \"darkcyan\" size= \"25px\"  />\n        </button>\n\n      </form>\n    </>\n  )\n\n}\n\n\n\n// Class Component mit ES6 syntx (also mit constructor)\nclass InputTodoClass extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      title: \"\"\n    }\n  }\n  onChangeHandler = (e) => {\n    // [e.target.name] : dynamische Vergabe der Eigenschaft\n    // eines Objects\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault(); // vermeide Abschicken des Formulars\n    // console.log(this.state.title);\n\n    if (this.state.title.trim() !== \"\") { //Title ist nicht leer\n      this.props.addTodoProp(this.state.title.trim());\n\n      // Input Feld leeren\n      this.setState({\n        title: \"\"\n      });\n\n    } else {\n      alert('Bitte Item reinschreiben!')\n    }\n\n    // trim entfernt Whitespace (z.B. Leerzeichen) am Anfang\n    // und am Ende eines Strings und gibt diesen zurück\n  }\n\n  render() {\n    return (\n      <form\n        onSubmit={this.handleSubmit}\n        className=\"form-container\"\n      >\n        <input\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"Add Todo...\"\n          value={this.state.title}\n          onChange={this.onChangeHandler}\n          className=\"input-text\"\n        />\n        <button className=\"input-submit\">Add +</button>\n      </form>\n    )\n  }\n}\nexport default InputTodo;\n\n// Exkurs: ES7 Syntax (wie im Tutorial)\n\nclass InputTodoEs7 extends Component {\n\n  state = {\n    title: \"\"\n  }\n\n  render() {\n    return (\n      <form>\n        <input type=\"text\" placeholder=\"Add Todo...\" />\n        <button>Submit</button>\n        Zugriff erfolgt auch mit this: {this.state.title}\n      </form>\n    )\n  }\n}","import React from \"react\";\n\n// Übersicht Class und Functional Component\n\nclass AlertButton extends React.Component {\n\n  // wenn wir einen state haben, können wir das im constructor() realiseren\n\n  clickHandler = () => {\n    alert(this.props.msg);\n    console.log(this.props.msg);\n  }\n\n  render() {\n    const buttonStyle = {\n      backgroundColor: \"green\",\n      color: \"white\",\n      borderRadius: \"15px\",\n      padding:\"10px\"\n    };\n    return(\n      <button\n        style={buttonStyle}\n        onClick={this.clickHandler}\n      >\n        {this.props.children}\n      </button>\n    );\n  }\n\n}\n\n/* -------------------------------------- */\nconst AlertButtonFunc =(props)=>{\n   const clickHandler = () => {\n        alert(props.msg);\n        console.log(props.msg);\n      };\n\n      const buttonStyle = {\n        backgroundColor: \"red\",\n        color: \"white\",\n        borderRadius: \"15px\",\n        padding:\"10px\"\n      };\n\n      return(\n        <button\n          style={buttonStyle}\n          onClick={clickHandler}\n        >\n          {props.children}\n        </button>\n      );\n}\n\n\nexport default AlertButton;\n//export default AlertButtonFunc;","import React from \"react\"\n\nconst About =()=> {\n    return <div>Hello from about page</div>\n}\n\nexport default About","import React  from \"react\";\n\nconst NotMatch = () =>{\n    return (\n        <div>\n            <h2 style={{color: \"red\"}}>No match for this page</h2>\n        </div>\n    )\n}\n\nexport default NotMatch","import React from 'react';\nimport './Navbar.css'\nimport { NavLink } from 'react-router-dom'\n\n\nconst Navbar = () => {\n    const activeClass = \"active-menu-item\"\n    return (\n        <nav className=\"topNav\">\n            <ul>\n                <li><NavLink activeClassName = {activeClass} to =\"/\" exact>Home</NavLink></li>\n                <li><NavLink activeClassName = {activeClass} to = \"/about\">About</NavLink></li>\n                <li><NavLink activeClassName = {activeClass} to =\"/contact\">Contact</NavLink></li>\n            </ul>\n\n\n        </nav>\n    )\n        \n}\n\nexport default Navbar","import React from 'react';\n\nconst Contact = () => {\n return <p>Hello from Contact</p>\n}\n\nexport default Contact","import React from \"react\";\nimport Header from \"../Header/Header.js\";\nimport Practice from \"../Practice/Practice.js\";\nimport TodoCount from \"../TodoCount/TodoCount.js\";\nimport TodoList from \"../TodoList/TodoList.js\";\nimport InputTodo from \"../InputTodo/InputTodo.js\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./TodoContainer.css\";\nimport AlertButton from \"../Practice/AlertButton.js\";        \nimport { Route, Router, Switch } from \"react-router-dom\"\nimport About from \"../../pages/About.js\";\nimport NotMatch from \"../../pages/NotMatch.js\";\nimport Navbar from \"../Navbar/Navbar.js\";\nimport Contact from \"../../pages/Contact.js\"\n\nclass TodoContainer extends React.Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      todos: []\n     };\n  }\n\n\n  handleChange = (id) => {\n    console.log('checkbox clicked:', id);\n\n    //Wichtig: State niemals direkt ändern:\n    //this.state.todos = []; // SO NICHT\n\n    //Funktion zum Ändern des states\n    //erwartet ein Object als Parameter\n\n    //Schreibweise ohne Ternären Operator\n    this.setState({\n      todos: this.state.todos.map( todoObj =>{\n        if(todoObj.id === id) {\n          return {\n            ...todoObj,\n            completed: !todoObj.completed\n          }\n        }\n        return todoObj;\n        \n      }) // END of map\n    });\n\n    // Schreibweise mit Ternären Operator\n  \n    // this.setState({\n    //   todos: this.state.todos.map( todoObj =>{\n    //     return {\n    //       ...todoObj,\n\n    //       // invertiere completed (false wird true und true wird false)\n    //       // wenn die ID des todoObj der id entspricht, die dem Handler (handleChange)\n    //       // übergeben wurde\n    //       completed: todoObj.id === id ? !todoObj.completed : todoObj.completed\n    //     }\n    //   })\n    // });\n\n\n    //❗Todo❗ in Zukunft: setState updater bzw callback benutzen\n    // Warum? Siehe unten bei Erklärungen\n  }\n\n  addTodo = (title) => {\n    console.log(title);\n\n    const newTodo = {\n      id: uuidv4(),\n      title: title,\n      completed: false\n    };\n    this.setState({\n      todos: [newTodo, ...this.state.todos]\n    });\n\n    // [...this.state.todos, newTodo]\n    // kopiert sozusagen unser todosArray und fügt\n    // unserer newTodo als erstes Element hinzu\n  }\n\n  delTodo = (id) => {\n\n    // hier speichern wir das state-obj\n    // in einer Variable\n\n    const newTodos = this.state.todos.filter( todo => {\n      return todo.id !== id;\n    });\n\n    this.setState( {todos: newTodos} );\n\n    // Todo Zukunft: Hier eigentlich wieder besser: callback \n    // function als Parameter für setState\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:3001/todos\")\n    .then(resp => resp.json())\n    .then(jsonData => {\n      const formattedData = jsonData.map(todo => {\n        return { id: todo._id, ...todo}\n      })\n      this.setState({\n        todo:formattedData\n      })\n    })\n\n    // wird aufgerufen, wenn die Component \"gemountet\", \n    // also zum DOM hinzugefügt wurde\n    console.log(\"%c ComponentDidMount in TodoContainer\", \"background: #bada55\")\n\n    // Wozu: NEtzwerkanfragen/Daten laden: z.B mit fetch\n\n    //AB hier: Todo von jsonplasholder fetchen\n    // fetch(\"https://jsonplaceholder.typicode.com/todos?_limit=10\")\n    //   .then( response => {return response.json()} )\n    //   .then( data => {\n    //     console.log(data);\n    //     //Todos aus jsonplaceholder unseres Todos hinzufügen\n    //     this.setState( {todos: [...data]} );\n    //   })\n\n    // Daten aus localStorage laden\n    const temp = localStorage.getItem(\"todos\");\n    const loadedTodos = JSON.parse(temp);\n\n    if(loadedTodos) { // loadedTodos ist nicht leer\n      this.setState({\n        todos: loadedTodos\n      })\n    }\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    // previousProps enthält die vorherigen Props (vor dem Update. Hier: leer)\n    // previousState enthält den vorherigen State (vor dem Update)\n    // componentDidUpdate wird ausgeführt, wenn die Komponente und \n    // somit das DOM geändert wurde\n\n    // array können nicht direkt miteinander verglichen werden\n    // => IMMER TRUE: if(previousState.todos !== this.state.todos) {\n    //Stattdessen: Arrays ins String umwandeln \n    if( JSON.stringify(previousState.todos) !== JSON.stringify(this.state.todos) ) {\n      // Hier ist es sinnvoll, die neuen Daten/State in einer Datenbank zu speichern\n      localStorage.setItem(\"todos\", JSON.stringify(this.state.todos) )\n    }\n    \n    // Mehr zu componentDidUpdate unten\n    console.log(\"%c componentDidUpdate in TodoContainer\", \"background: #bada55\")\n  }\n\n  render() {\n    // todosProp={this.state.todos}: Übergibt das\n    // todos-Array an die TodoList Component\n\n    return (\n      <>\n      <Navbar />\n      <Switch>\n      <Route path=\"/\" exact>    {/* muss  die url */}\n        <div className=\"container\">\n          <div className=\"inner\">\n            <Header />\n            <InputTodo \n            addTodoProp={this.addTodo}\n          />\n          <TodoList \n            todosProp={this.state.todos}\n            handleChangeProp={this.handleChange}\n            delTodoProp={this.delTodo}\n          />\n          <TodoCount todosProp={this.state.todos} />\n         {/*  <Practice />   */}        \n          </div>\n        </div>\n    </Route> \n      <Route path=\"/about\" component = {About} > \n        \n      </Route>\n\n      <Route path= \"/contact\">\n        <Contact />\n      </Route>\n\n      <Route path=\"*\">\n        <NotMatch />\n      </Route>\n    </Switch>\n    </>\n    );\n  }\n}\n\nexport default TodoContainer; \n\n// *** Erklärungen ***\n\n// Ternärer Operator: ? :\n// https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\n\n\n// let completed = todoObj.id === id ? !todoObj.completed : todoObj.completed\n\n// Obere Zeile ist gleichbedeutend mit folgendem Code\n\n// let completed = null;\n// if( todoObj.id === id ) {\n//   completed =!todoObj.completed\n// } else {\n//   completed = todoObj.completed;\n// }\n\n\n// *** ComponentDidUpdate ***\n// Am besten vergleicht man den vorherigen State mit dem neuen State,\n// damit man potenzielle Endless-Loops vermeidet. Vor allem wird das wichtig\n// wenn man setState in ComponentDidUpdate verwendet","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport TodoContainer from \"./components/TodoContainer/TodoContainer.js\"\nimport { BrowserRouter as Router} from 'react-router-dom'\nimport \"./App.css\"\n//const reactElement = <h1>Hello aus index.js</h1>  //  intern: React.createELement()\n\n\n\n// Rendert unsere Components/React-Elemente im DOM\n// hier wird es an das HTML Element #root hinzugefügt \n// (siehe public -> index.html -> <body><)\nReactDOM.render(\n    <React.StrictMode>\n        <Router>\n            <TodoContainer/>\n        </Router>\n    </React.StrictMode>, \n    document.getElementById(\"root\"));\n\n\n\n"],"sourceRoot":""}